# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '**/*.csproj'
      arguments: '--configuration Release --no-restore'

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      arguments: '--configuration Release --no-restore --no-build --output $(Build.StagingDirectory)/publish-artifacts'
      zipAfterPublish: false
      modifyOutputPath: false
      pathToPublish: $(Build.ArtifactStagingDirectory)

  - publish:  $(Build.StagingDirectory)/publish-artifacts
    artifact: publish-artifacts

  - task: DotNetCoreCLI@2
    displayName: Unit Tests
    continueOnError: True
    inputs:
      command: test
      projects: '**/*.*Tests.csproj'
      arguments: /p:CollectCoverage=true /p:CoverletOutputFormat="opencover%2ccobertura" /p:Exclude="[xunit*]*" --no-build --configuration Release --logger trx --results-directory $(Agent.TempDirectory)
      publishTestResults: false
    env:
      CollectCoverage: true
      CoverletOutputFormat: opencover,cobertura

  - task: CopyFiles@2
    displayName: Save Unit Tests Results
    inputs:
      SourceFolder: $(Agent.TempDirectory)
      TargetFolder: $(Agent.BuildDirectory)/TestResults
      OverWrite: true

  - task: PublishTestResults@2
    displayName: Publish Test Results *.trx
    inputs:
      testRunner: VSTest
      testResultsFiles: '*.trx'
      searchFolder: $(Agent.BuildDirectory)/TestResults
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: rental-company-tests

  - task: reportgenerator@5
    displayName: Generate Code Coverage Reports
    inputs:
      reports: $(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml
      targetdir: $(Build.SourcesDirectory)/CodeCoverage

  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/CodeCoverage
      pathToSources: $(Build.SourcesDirectory)

# - task: BuildQualityChecks@8
#   displayName: 'Check Build Quality'
#   inputs:
#     checkWarnings: $(BuildQualityChecks.CheckWarnings)
#     warningThreshold: $(BuildQualityChecks.WarningThreshold)
#     showStatistics: true
#     warningTaskFilters: '/^Build$/'
#     warningFailOption: fixed
#     checkCoverage: $(BuildQualityChecks.CheckCoverage)
#     coverageFailOption: fixed
#     coverageType: lines
#     coverageThreshold: $(BuildQualityChecks.CoverageThreshodld)
#     coverageUpperThreshold: 100
